# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from tensorflow_serving.apis import configuration_pb2 as tensorflow__serving_dot_apis_dot_configuration__pb2


class ConfigurationServiceStub(object):
  """open source marker; do not remove
  ConfigureService provides the facility to configure the server
  at runtime
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Configure = channel.unary_unary(
        '/tensorflow.serving.ConfigurationService/Configure',
        request_serializer=tensorflow__serving_dot_apis_dot_configuration__pb2.ConfigurationRequest.SerializeToString,
        response_deserializer=tensorflow__serving_dot_apis_dot_configuration__pb2.ConfigurationResponse.FromString,
        )


class ConfigurationServiceServicer(object):
  """open source marker; do not remove
  ConfigureService provides the facility to configure the server
  at runtime
  """

  def Configure(self, request, context):
    """Configure -- Configures a Service.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ConfigurationServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Configure': grpc.unary_unary_rpc_method_handler(
          servicer.Configure,
          request_deserializer=tensorflow__serving_dot_apis_dot_configuration__pb2.ConfigurationRequest.FromString,
          response_serializer=tensorflow__serving_dot_apis_dot_configuration__pb2.ConfigurationResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'tensorflow.serving.ConfigurationService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
